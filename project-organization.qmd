---
code-annotations: hover
engine: knitr
---

# {{< fa folder-tree >}} Project Organization {.unnumbered}

## Naming Conventions

{{< video https://www.youtube.com/watch?v=ES1LTlnpLMk&list=PLy_EwS4oOnoQzWYaWDO_x5t7O1RqHwuhw&index=5&pp=gAQBiAQB >}}

**TL;DR**:

**File and Directory Naming Best Practices:**

1.  **Machine Readability:**
    -   Use globbing with regular expressions for pattern matching in scripting languages (e.g., Bash).
    -   Example: **`report-2020-*.txt`** to find files matching a pattern.
2.  **Naming Rules:**
    -   Avoid spaces and accented characters.
    -   Use only hyphens (-) and underscores (_) for punctuation.
    -   Use lowercase letters exclusively.
3.  **Human Readability:**
    -   Employ highly informative slugs for filenames (e.g., **`01_collect-cdec-snow-data.R`**).
    -   Ensure slugs are descriptive, concise, and in plain language.
    -   Use hyphens to replace spaces.
4.  **Metadata Separation:**
    -   Use underscores to separate metadata for parsing in scripting languages.
    -   Example: **`01_report-metadata.txt`** for clear metadata separation.
5.  **Logical Sorting:**
    -   Apply left padding (e.g., 01, 02) for sequential order.
    -   Useful for predefined sequences or steps in a process.
6.  **Chronological Sorting:**
    -   Follow the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) date format (YYYY-MM-DD), e.g., **`2020-12-01_draft.docx`**.
    -   Suitable for tracking updates/progress or changes over time.

These practices ensure both machines and humans can easily work with your files and directories, promoting organization and clarity in your projects.

| Type | Naming Convention | Example |
|------|-------------------|---------|
|      |                   |         |
|      |                   |         |
|      |                   |         |

## Directories

### Local - Shared Google Drive

#### Example Project Directory Structure

``` {.python .code-overflow-wrap}
ðŸ“¦/g/path/to/example-project-directory # <1>
 â”£ ðŸ“‚deliverables # <2>
 â”ƒ â”— ðŸ“‚papers # <3>
 â”£ ðŸ“‚github-repo # <4>
 â”ƒ â”— ðŸ“‚example-project-github-repo # <4>
 â”£ ðŸ“‚meetings-and-events # <5>
 â”ƒ â”£ ðŸ“‚meeting-notes # <6>
 â”ƒ â”£ ðŸ“‚agendas # <7>
 â”ƒ â”— ðŸ“‚workshop-or-event-planning # <8>
 â”£ ðŸ“‚presentations # <9>
 â”£ ðŸ“‚project-materials # <10>
 â”ƒ â”£ ðŸ“‚methods-drafts # <11>
 â”ƒ â”— ðŸ“‚lit-review # <12>
 â”— ðŸ“œREADME.md # <13>
```

1.  Root directory housing all materials and documentation for the research project.
2.  Contains final outputs like reports, papers, or products resulting from the project.
3.  Stores final versions and supplementary materials for academic papers or reports.
4.  Specific GitHub repository directory for collaborative development and code sharing. *Only `example-project-github-repo/` will be pushed to GitHub.*
5.  Organizes documentation and planning materials for meetings and events related to the project.
6.  Archives notes and decisions from project meetings.
7.  Prepares and stores agendas for upcoming meetings to structure discussions.
8.  Holds planning documents, schedules, and resources for workshops or project-related events.
9.  Contains slides, speaker notes, and related materials for presentations about the project.
10. Stores various project-related documents not categorized elsewhere.
11. Keeps drafts and notes on methodological approaches and procedures.
12. Compiles literature reviews, reference materials, and bibliographies.
13. Provides an overview of the project directory, explaining the structure and contents of the folders/files.

#### Create New Project Directory

The following code creates a directory for your project within the `current-projects/` directory in the `Oleson Lab/` Shared Google Drive by making a copy of an existing template.

To execute this code chunk, please do the following:

1.  Ensure you have [Google Drive for Desktop](https://olesonlab.github.io/oleson-lab_research-project-resource/software-and-platforms.html#sec-download-sign-up-links) software downloaded, you are signed in, and are able to see the `Oleson Lab/` directory in your `Shared Drives/` directory
2.  Change `#| eval: false` to `#| eval: true`
3.  Input your desired project name in the code `project_name="example-project"`.

```{bash}
#| label: create-new-project-directory
#| code-overflow: wrap
#| eval: false # <1>
#| echo: fenced

echo "Starting script..." # <2>

cd "/g/Shared drives/Oleson Lab/projects/project-management-resources" # <3>

new_project_template="/g/Shared drives/Oleson Lab/projects/project-management-resources/new-project-template" # <4>

project_name="example-project" # <4>

new_current_project_directory="/g/Shared drives/Oleson Lab/projects/current-projects/$project_name"  # <5>

# Check if the directory already exists
if [ -d "$new_current_project_directory" ]; then # <6>
    echo "Error: A project with the name '$project_name' already exists. Please choose a different name." # <6>
    exit 1 # <6>
fi # <6>

# Copy the new-project-template directory to the new project directory
cp -r "$new_project_template" "$new_current_project_directory" # <7>

echo "Completed copying." # <8>
```

1.  **To run code chunk, set `false` to `true`.**
2.  Confirms that the script is initiated.
3.  Navigates to directory containing the new project template.
4.  Defines a variable `new_project_template` which stores the `new-project-template/` directory file path.
5.  Sets project_name to desired project name and constructs a path for the new project in the `current-projects` directory. **Replace `[insert-project-name]`.**
6.  Checks to see whether or not the directory exists within the `current-projects/` directory and if so, prompts you to choose another name.
7.  Copies everything within the `new-project-template/`directory into the `current-projects/` directory and renames it accordingly.
8.  Confirms that the script ran successfully.

### Remote - GitHub Repository

#### Example GitHub Repository Structure

``` {.python .code-overflow-wrap}
ðŸ“¦/g/path/to/example-project # <1>       
 â”£ ðŸ“‚outputs # <2>                       
 â”ƒ â”£ ðŸ“‚tables # <3>                      
 â”ƒ â”— ðŸ“‚plots # <4>                       
 â”£ ðŸ“‚documentation  # <5>                 
 â”£ ðŸ“‚code # <6>                           
 â”ƒ â”£ ðŸ“‚functions # <7>                  
 â”ƒ â”— ðŸ“‚models # <8>                      
 â”£ ðŸ“‚data # <9>                           
 â”ƒ â”£ ðŸ“‚exploratory # <10>                  
 â”ƒ â”£ ðŸ“‚raw # <11>                          
 â”ƒ â”£ ðŸ“‚tidied # <12>                       
 â”ƒ â”— ðŸ“‚output # <13>                       
 â”£ ðŸ“œLICENSE # <14>                        
 â”£ ðŸ“œ.gitignore # <15>                     
 â”£ ðŸ“œexample-project.Rproj # <16>                     
 â”£ ðŸ“œREADME.qmd # <17>                     
 â”— ðŸ“œREADME.md # <18>  
```

1.  Serves as the root directory, encapsulating all project components for easy management and navigation.
2.  Contains generated files like tables and plots, separating results from the input data and code.
3.  Stores tabular results and data summaries.
4.  Holds visualizations and graphs generated by the analysis.
5.  Stores project documentation, reports, and notes, centralizing information for reference and clarity.
6.  Contains all the scripts and code used in the project, promoting modularity and code reuse.
7.  Stores custom functions to ensure code modularity and readability.
8.  Holds existing and output models.
9.  Acts as the main repository for all datasets, organized to reflect different stages of data processing.
10. Contains initial explorations and analyses, fostering a sandbox environment for preliminary insights. (Will not be pushed to GitHub)
11. Stores unmodified raw data, preserving the original datasets for reproducibility and reference.
12. Holds processed and cleaned data, ready for analysis, ensuring consistency and reliability. (Will not be pushed to GitHub)
13. Stores the final dataset used for analysis.
14. Holds processed and cleaned data, ready for analysis, ensuring consistency and reliability.
15. Specifies the terms under which the project can be used or distributed, clarifying legal and usage aspects.
16. Lists files and directories to be ignored by version control, keeping the repository clean and relevant.
17. Provides a Quarto-rendered, detailed project overview and instructions, enhancing comprehension and usage.
18. Output of `README.qmd` used to be displayed on GitHub Repository.

## Acknowledgements

We crafted our directory structures by drawing from a blend of best practices as outlined in the Environmental Markets Lab's (emLab) [file structure](https://emlab-ucsb.github.io/SOP/2-file-structure.html#file-structure) guide and the valuable insights shared in the Riffomonas Project's [project organization tutorial](https://www.youtube.com/watch?v=olu821RTQA8).
