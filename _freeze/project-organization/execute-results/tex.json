{
  "hash": "8fc7ce88e08864d51fab4994cde98f13",
  "result": {
    "engine": "knitr",
    "markdown": "---\ncode-annotations: hover\nengine: knitr\n---\n\n\n\n# Project Organization {.unnumbered}\n\n## Naming Conventions\n\n\n\n{{< video https://www.youtube.com/watch?v=ES1LTlnpLMk&list=PLy_EwS4oOnoQzWYaWDO_x5t7O1RqHwuhw&index=5&pp=gAQBiAQB >}}\n\n\n\n\n\n**TL-DR**:\n\nBest practices when naming directories and files:\n\n1.  Make it machine readable\n    -   Use globbing to isolate and find files that match a simple pattern using regular expressions in a scripting language\n        -   Eg., The following bash code will find all file names that start with `report-2020-` and ends with `.txt` `report-2020-*.txt`\n    -   No spaces or accented characters\n    -   No punctuation other than hyphens (-) and underscores (\\_)\n    -   Use lowercase only\n2.  Make it human readable\n    -   Use highly informative slugs (e.g., `01_collect-cdec-snow-data.R`)\n        -   Should be descriptive and should accurately reflect the content\n        -   Should be concise\n        -   Use plain language, but still readable and understandable\n        -   Use hyphenation for spaces\n        -   Use underscores to separate metadata that needs to be parsed or processed in a scripting language using regular expressions\n        -   Avoid special characters\n3.  Sort it in a useful way\n    -   Put something numeric first\n    -   Logical sorting\n        -   Apply left padding (e.g., 01, 02, etc.) to single digit numbers in file names to maintain their sequential order\n        -   Use when you have a predefined sequence or steps in a process (e.g., stages in a workflow)\n    -   Chronological sorting\n        -   Follow the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard when formatting dates: YYYY-MM-DD (e.g., `2020-12-01_draft.docx`)\n        -   Use when the timeline of creation, modification, or relevance is important (e.g., In projects with regular updates or when you need to track progress or changes over time where the most recent date indicates the latest version)\n\n| Type | Naming Convention | Example |\n|------|-------------------|---------|\n|      |                   |         |\n|      |                   |         |\n|      |                   |         |\n\n## Directories\n\n### Local - Shared Google Drive\n\n#### Example Project Directory Structure\n\n``` {.python .code-overflow-wrap}\nðŸ“¦/g/path/to/example-project-directory # <1>\n â”£ ðŸ“‚deliverables # <2>\n â”ƒ â”— ðŸ“‚papers # <3>\n â”£ ðŸ“‚github-repo # <4>\n â”ƒ â”— ðŸ“‚example-project-github-repo # <4>\n â”£ ðŸ“‚meetings-and-events # <5>\n â”ƒ â”£ ðŸ“‚meeting-notes # <6>\n â”ƒ â”£ ðŸ“‚agendas # <7>\n â”ƒ â”— ðŸ“‚workshop-or-event-planning # <8>\n â”£ ðŸ“‚presentations # <9>\n â”£ ðŸ“‚project-materials # <10>\n â”ƒ â”£ ðŸ“‚methods-drafts # <11>\n â”ƒ â”— ðŸ“‚lit-review # <12>\n â”— ðŸ“œREADME.md # <13>\n```\n\n1.  Root directory housing all materials and documentation for the research project.\n2.  Contains final outputs like reports, papers, or products resulting from the project.\n3.  Stores final versions and supplementary materials for academic papers or reports.\n4.  Specific GitHub repository directory for collaborative development and code sharing. *Only `example-project-github-repo/` will be pushed to GitHub.*\n5.  Organizes documentation and planning materials for meetings and events related to the project.\n6.  Archives notes and decisions from project meetings.\n7.  Prepares and stores agendas for upcoming meetings to structure discussions.\n8.  Holds planning documents, schedules, and resources for workshops or project-related events.\n9.  Contains slides, speaker notes, and related materials for presentations about the project.\n10. Stores various project-related documents not categorized elsewhere.\n11. Keeps drafts and notes on methodological approaches and procedures.\n12. Compiles literature reviews, reference materials, and bibliographies.\n13. Provides an overview of the project directory, explaining the structure and contents of the folders/files.\n\n#### Create New Project Directory\n\nThe following code creates a directory for your project within the `current-projects/` directory in the `Oleson Lab/` Shared Google Drive by making a copy of an existing template.\n\nTo execute this code chunk, please do the following:\n\n1.  Ensure you have [Google Drive for Desktop](https://www.google.com/drive/download/) software downloaded, you are signed in, and are able to see the `Oleson Lab/` directory in your `Shared Drives/` directory\n2.  Change `#| eval: false` to `#| eval: true`\n3.  Input your desired project name in the code `project_name=\"example-project\"`.\n\n\n\n::: {.cell}\n\n````{.cell-code .code-overflow-wrap}\n```{{bash}}\n#| label: create-new-project-directory\n#| code-overflow: wrap\n#| eval: false # <1>\n\necho \"Starting script...\" # <2>\n\ncd \"/g/Shared drives/Oleson Lab/projects/project-management-resources\" # <3>\n\nnew_project_template=\"/g/Shared drives/Oleson Lab/projects/project-management-resources/new-project-template\" # <4>\n\nproject_name=\"example-project\" # <4>\n\nnew_current_project_directory=\"/g/Shared drives/Oleson Lab/projects/current-projects/$project_name\"  # <5>\n\n# Check if the directory already exists\nif [ -d \"$new_current_project_directory\" ]; then # <6>\n    echo \"Error: A project with the name '$project_name' already exists. Please choose a different name.\" # <6>\n    exit 1 # <6>\nfi # <6>\n\n# Copy the new-project-template directory to the new project directory\ncp -r \"$new_project_template\" \"$new_current_project_directory\" # <7>\n\necho \"Completed copying.\" # <8>\n```\n````\n:::\n\n\n\n1.  **To run code chunk, set `false` to `true`.**\n2.  Confirms that the script is initiated.\n3.  Navigates to directory containing the new project template.\n4.  Defines a variable `new_project_template` which stores the `new-project-template/` directory file path.\n5.  Sets project_name to desired project name and constructs a path for the new project in the `current-projects` directory. **Replace `[insert-project-name]`.**\n6.  Checks to see whether or not the directory exists within the `current-projects/` directory and if so, prompts you to choose another name.\n7.  Copies everything within the `new-project-template/`directory into the `current-projects/` directory and renames it accordingly.\n8.  Confirms that the script ran successfully.\n\n### Remote - GitHub Repository\n\n#### Example GitHub Repository Structure\n\n``` {.python .code-overflow-wrap}\nðŸ“¦/g/path/to/example-project # <1>       \n â”£ ðŸ“‚outputs # <2>                       \n â”ƒ â”£ ðŸ“‚tables # <3>                      \n â”ƒ â”— ðŸ“‚plots # <4>                       \n â”£ ðŸ“‚documentation  # <5>                 \n â”£ ðŸ“‚code # <6>                           \n â”ƒ â”£ ðŸ“‚functions # <7>                  \n â”ƒ â”— ðŸ“‚models # <8>                      \n â”£ ðŸ“‚data # <9>                           \n â”ƒ â”£ ðŸ“‚exploratory # <10>                  \n â”ƒ â”£ ðŸ“‚raw # <11>                          \n â”ƒ â”£ ðŸ“‚tidied # <12>                       \n â”ƒ â”— ðŸ“‚output # <13>                       \n â”£ ðŸ“œLICENSE # <14>                        \n â”£ ðŸ“œ.gitignore # <15>                     \n â”£ ðŸ“œexample-project.Rproj # <16>                     \n â”£ ðŸ“œREADME.qmd # <17>                     \n â”— ðŸ“œREADME.md # <18>  \n```\n\n1.  Serves as the root directory, encapsulating all project components for easy management and navigation.\n2.  Contains generated files like tables and plots, separating results from the input data and code.\n3.  Stores tabular results and data summaries.\n4.  Holds visualizations and graphs generated by the analysis.\n5.  Stores project documentation, reports, and notes, centralizing information for reference and clarity.\n6.  Contains all the scripts and code used in the project, promoting modularity and code reuse.\n7.  Stores custom functions to ensure code modularity and readability.\n8.  Holds existing and output models.\n9.  Acts as the main repository for all datasets, organized to reflect different stages of data processing.\n10. Contains initial explorations and analyses, fostering a sandbox environment for preliminary insights. (Will not be pushed to GitHub)\n11. Stores unmodified raw data, preserving the original datasets for reproducibility and reference.\n12. Holds processed and cleaned data, ready for analysis, ensuring consistency and reliability. (Will not be pushed to GitHub)\n13. Stores the final dataset used for analysis.\n14. Holds processed and cleaned data, ready for analysis, ensuring consistency and reliability.\n15. Specifies the terms under which the project can be used or distributed, clarifying legal and usage aspects.\n16. Lists files and directories to be ignored by version control, keeping the repository clean and relevant.\n17. Provides a Quarto-rendered, detailed project overview and instructions, enhancing comprehension and usage.\n18. Output of `README.qmd` used to be displayed on GitHub Repository.\n",
    "supporting": [
      "project-organization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}